var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': 'Tasks', 'text': '', 'tags': '', 'url': 'Tasks.html'}, {'title': 'Task1', 'text': '1.在可攜系統中，添加Solvespace \xa0完成編譯‧ \n 2.在 Solvespace \xa0中進行繪圖實習並了解其中的關西‧ \n 3.建立零組件完成組配進行分析‧ \n', 'tags': '', 'url': 'Task1.html'}, {'title': 'Solvespace 編譯', 'text': '編譯步驟: \n 先將 Y:\\portablegit\\bin\\sh.exe 改名為 sh_rename_for_solvespace.exe (透過 MSYS2 執行 shell 指令, 而非 portablegit 中的 sh.exe) \n git version 查驗 git 版本 \n git 2.13 版本以上, 可以使用下列 git clone \xa0 --recurse-submodules 取得所有子模組資料 \n git clone --recurse-submodules https://github.com/solvespace/solvespace.git solvespace \n 上述指令同: \n git clone\xa0 https://github.com/solvespace/solvespace.git \xa0 \n cd solvespace \n git submodule init \n git submodule update \n edit Y:\\tmp\\solvespace\\extlib\\angle\\CMakeLists.txt comment out line 713 and 714 \n #list(APPEND ANGLE_DEFINITIONS #"-DANGLE_PRELOADED_D3DCOMPILER_MODULE_NAMES={ \\"d3dcompiler_47.dll\\", \\"d3dcompiler_46.dll\\", \\"d3dcompiler_43.dll\\" }") endif() \n 接著需要手動進行 libpng.dll.a 的編譯, 並改名為 libpng_static.a, 並放到編譯系統的 lib 目錄中 (即隨身系統的 msys64\\mingw64\\lib 目錄): \n cd solvespace \n cd extlib \n cd libpng \n mkdir build \n cd build \n cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release mingw32-make \n (mingw32-make -Wl,-static) \n rename libpng.dll.a to libpng_static.a and copy to Y:\\msys64\\mingw64\\lib \n 接著回到 solvespace 原始碼目錄, 建立 build 目錄後進入 build 目錄, 執行: \n cmake .. -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release mingw32-make \n 參考資料: \n https://2019wcm.blogspot.com/2019/03/msys2-solvespace.html \n https://github.com/solvespace/solvespace \n', 'tags': '', 'url': 'Solvespace 編譯.html'}, {'title': 'Solvespace 操作', 'text': 'Solvespace常用指令對照表 \n \n \n \n Solvespace Tutorial 1 - a Simple Plate \n \n', 'tags': '', 'url': 'Solvespace 操作.html'}, {'title': 'Task1進階', 'text': 'Task1 所需完成事項如下: \n \n 利用 Solvespace 繪製雙輪車所需的零組件, 將操作過程拍成帶有說明字幕的影片後上傳至 Youtube 後, 嵌入個人網頁 W6 頁面中. (影片標題為: 機械設計工程系-電腦輔助設計實習 W6 任務一參數化零組件繪製). \n 利用 V-rep 3.6.1 rev4 與隨身程式執行系統, 完成網際 V-rep 模型控制任務後, 將操作過程拍成帶有說明字幕的影片後上傳至 Youtube 後, 嵌入個人網頁 W6 頁面中. (影片標題為: 機械設計工程系-電腦輔助設計實習 W6 任務一網際 V-rep 模型控制). \n 從 \xa0 #14 \xa0 已知可透過 Python 程式啟動或停止 V-rep 模擬, 請在事項 2 的架構下, 新增兩個按鈕, 可以啟動或停止所連線的 V-rep 模擬. 完成後將操作流程拍成帶字幕的影片後上傳至 Youtube 後, 嵌入個人網頁 W6 頁面中. (影片標題為: 機械設計工程系-電腦輔助設計實習 W6 任務一新增啟動與停止按鈕) \n \n', 'tags': '', 'url': 'Task1進階.html'}, {'title': '1.參數化零組件繪製', 'text': '利用  Solvespace  繪製雙輪車所需的零組件: \n (一) 繪製車架 \n \n 雙輪車 車架設計  1.需有輸出軸孔定位 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0\xa0 2.設定車輪軸與地面高度 \n (二)繪製車輪 \n \n 雙輪車 車輪設計  1.需設定車輪大小胎寬 \n \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0 \xa0\xa0 2.輪軸大小.長度 \n (三)零組件組配 \n \n 雙輪車 組配 完成組配', 'tags': '', 'url': '1.參數化零組件繪製.html'}, {'title': 'Q&A', 'text': '這裡紀錄著40723147學員 \n 在進行Tasks時所發生的問題與解答‧ \n', 'tags': '', 'url': 'Q&A.html'}, {'title': 'T1', 'text': '(一) Solvespace \xa0 編譯過程中缺少檔案 \n 開啟Solvespace時出現缺少 libwinpthread-1.\xa0dll\xa0 檔案 \n \n 1.在E:\\solvespace\\build\\bin中檢查缺少的檔案 libwinpthread-1.\xa0dll\xa0 \n 2.從Y:\\tmp\\solvespace\\build\\bin中尋找 libwinpthread-1.\xa0dll\xa0 將其複製到 E:\\solvespace\\build\\bin中‧補足缺少的檔案‧ \n \n \n \n (二) Solvespace編譯過程中出現錯誤 \n 當我們執行 mingw32-make 指令時會出現錯誤如圖: \n \n 原因是未將E:\\cad\\201906_fall\\work\\solvespace\\extlib\\angle\\ \n CMakeLists.txt  檔案中的 713行 與 714行 開頭加上  #符號 \n (此路徑為待編譯solvespace中的對應路徑) \n (非原先在Y:\\tmp\\solvespace\\extlib\\angle中的 CMakeLists.txt\xa0 ) \n \n \n 圖中 713行 與 714行 並未再開頭加入\xa0 #符號 故出現此錯誤 \n \n \n 此圖 713行 與 714行 已加入  #符號 便可以繼續編譯~~~', 'tags': '', 'url': 'T1.html'}]};